{
    "sourceFile": "jest.config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1685786057159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1685786066297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,5 @@\n-module.exports\n\\ No newline at end of file\n+module.exports{\r\n+\r\n+\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786072097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n module.exports{\r\n+rootD\r\n \r\n \r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786077434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n module.exports{\r\n-rootD\r\n+rootDir\r\n \r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786083745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n module.exports{\r\n-rootDir\r\n+rootDir:\"\",\r\n \r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786108273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n module.exports{\r\n-rootDir:\"\",\r\n+rootDir:\"tests-snapshots\",\r\n \r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786120998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n module.exports{\r\n-rootDir:\"tests-snapshots\",\r\n+rootDir:\"./tests-snapshots\",\r\n+test\r\n \r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786126619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n module.exports{\r\n rootDir:\"./tests-snapshots\",\r\n-test\r\n+testTimeout\r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786132159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n module.exports{\r\n rootDir:\"./tests-snapshots\",\r\n-testTimeout\r\n+testTimeout:30000,\r\n \r\n+\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786146149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n module.exports{\r\n rootDir:\"./tests-snapshots\",\r\n testTimeout:30000,\r\n+ba\r\n \r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786153063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n module.exports{\r\n rootDir:\"./tests-snapshots\",\r\n testTimeout:30000,\r\n-ba\r\n+bail: 0\r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786221672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n module.exports{\r\n-rootDir:\"./tests-snapshots\",\r\n-testTimeout:30000,\r\n+rootDir:\"./tests-snapshots\";\r\n+testTimeout: 30000,\r\n bail: 0\r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786230173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n module.exports{\r\n rootDir:\"./tests-snapshots\";\r\n-testTimeout: 30000,\r\n-bail: 0\r\n+testTimeout: 30000;\r\n+bail: 0 // \r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786242074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n module.exports{\r\n rootDir:\"./tests-snapshots\";\r\n testTimeout: 30000;\r\n-bail: 0 // \r\n+bail: 0 // not terminate in case of fai\r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786391865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n module.exports{\r\n rootDir:\"./tests-snapshots\";\r\n testTimeout: 30000;\r\n-bail: 0 // not terminate in case of fai\r\n+bail: 0 ;// not terminate in case of failer\r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786450186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n module.exports{\r\n rootDir:\"./tests-snapshots\";\r\n testTimeout: 30000;\r\n-bail: 0 ;// not terminate in case of failer\r\n+bail: 0 // not terminate in case of failer\r\n \r\n\\ No newline at end of file\n-}\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685786455564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n module.exports{\r\n-rootDir:\"./tests-snapshots\";\r\n-testTimeout: 30000;\r\n+rootDir:\"./tests-snapshots\",\r\n+testTimeout: 30000,\r\n bail: 0 // not terminate in case of failer\r\n \r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685789768650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-module.exports{\r\n+module.exports={\r\n rootDir:\"./tests-snapshots\",\r\n testTimeout: 30000,\r\n bail: 0 // not terminate in case of failer\r\n \r\n"
                },
                {
                    "date": 1685789775309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,5 +2,5 @@\n rootDir:\"./tests-snapshots\",\r\n testTimeout: 30000,\r\n bail: 0 // not terminate in case of failer\r\n \r\n-};\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685790698299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n module.exports={\r\n rootDir:\"./tests-snapshots\",\r\n testTimeout: 30000,\r\n-bail: 0 // not terminate in case of failer\r\n-\r\n+bail: 0 // not terminate in case of failer\\\r\n+\\\r\n+\\\\\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685790719231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n module.exports={\r\n rootDir:\"./tests-snapshots\",\r\n testTimeout: 30000,\r\n bail: 0 // not terminate in case of failer\\\r\n-\\\r\n-\\\\\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685802548299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n module.exports={\r\n rootDir:\"./tests-snapshots\",\r\n testTimeout: 30000,\r\n-bail: 0 // not terminate in case of failer\\\r\n+bail: 0 // not terminate in case of failer\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685802553636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,197 @@\n-module.exports={\r\n-rootDir:\"./tests-snapshots\",\r\n-testTimeout: 30000,\r\n-bail: 0 // not terminate in case of failer\r\n+/*\n+ * For a detailed explanation regarding each configuration property and type check, visit:\n+ * https://jestjs.io/docs/configuration\n+ */\n+\n+export default {\n+  // All imported modules in your tests should be mocked automatically\n+  // automock: false,\n+\n+  // Stop running tests after `n` failures\n+  // bail: 0,\n+\n+  // The directory where Jest should store its cached dependency information\n+  // cacheDirectory: \"C:\\\\Users\\\\ZZ00VO865\\\\AppData\\\\Local\\\\Temp\\\\jest\",\n+\n+  // Automatically clear mock calls, instances, contexts and results before every test\n+  // clearMocks: false,\n+\n+  // Indicates whether the coverage information should be collected while executing the test\n+  // collectCoverage: false,\n+\n+  // An array of glob patterns indicating a set of files for which coverage information should be collected\n+  // collectCoverageFrom: undefined,\n+\n+  // The directory where Jest should output its coverage files\n+  // coverageDirectory: undefined,\n+\n+  // An array of regexp pattern strings used to skip coverage collection\n+  // coveragePathIgnorePatterns: [\n+  //   \"\\\\\\\\node_modules\\\\\\\\\"\n+  // ],\n+\n+  // Indicates which provider should be used to instrument code for coverage\n+  // coverageProvider: \"babel\",\n+\n+  // A list of reporter names that Jest uses when writing coverage reports\n+  // coverageReporters: [\n+  //   \"json\",\n+  //   \"text\",\n+  //   \"lcov\",\n+  //   \"clover\"\n+  // ],\n+\n+  // An object that configures minimum threshold enforcement for coverage results\n+  // coverageThreshold: undefined,\n+\n+  // A path to a custom dependency extractor\n+  // dependencyExtractor: undefined,\n+\n+  // Make calling deprecated APIs throw helpful error messages\n+  // errorOnDeprecated: false,\n+\n+  // The default configuration for fake timers\n+  // fakeTimers: {\n+  //   \"enableGlobally\": false\n+  // },\n+\n+  // Force coverage collection from ignored files using an array of glob patterns\n+  // forceCoverageMatch: [],\n+\n+  // A path to a module which exports an async function that is triggered once before all test suites\n+  // globalSetup: undefined,\n+\n+  // A path to a module which exports an async function that is triggered once after all test suites\n+  // globalTeardown: undefined,\n+\n+  // A set of global variables that need to be available in all test environments\n+  // globals: {},\n+\n+  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n+  // maxWorkers: \"50%\",\n+\n+  // An array of directory names to be searched recursively up from the requiring module's location\n+  // moduleDirectories: [\n+  //   \"node_modules\"\n+  // ],\n+\n+  // An array of file extensions your modules use\n+  // moduleFileExtensions: [\n+  //   \"js\",\n+  //   \"mjs\",\n+  //   \"cjs\",\n+  //   \"jsx\",\n+  //   \"ts\",\n+  //   \"tsx\",\n+  //   \"json\",\n+  //   \"node\"\n+  // ],\n+\n+  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n+  // moduleNameMapper: {},\n+\n+  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n+  // modulePathIgnorePatterns: [],\n+\n+  // Activates notifications for test results\n+  // notify: false,\n+\n+  // An enum that specifies notification mode. Requires { notify: true }\n+  // notifyMode: \"failure-change\",\n+\n+  // A preset that is used as a base for Jest's configuration\n+  // preset: undefined,\n+\n+  // Run tests from one or more projects\n+  // projects: undefined,\n+\n+  // Use this configuration option to add custom reporters to Jest\n+  // reporters: undefined,\n+\n+  // Automatically reset mock state before every test\n+  // resetMocks: false,\n+\n+  // Reset the module registry before running each individual test\n+  // resetModules: false,\n+\n+  // A path to a custom resolver\n+  // resolver: undefined,\n+\n+  // Automatically restore mock state and implementation before every test\n+  // restoreMocks: false,\n+\n+  // The root directory that Jest should scan for tests and modules within\n+  // rootDir: undefined,\n+\n+  // A list of paths to directories that Jest should use to search for files in\n+  // roots: [\n+  //   \"<rootDir>\"\n+  // ],\n+\n+  // Allows you to use a custom runner instead of Jest's default test runner\n+  // runner: \"jest-runner\",\n+\n+  // The paths to modules that run some code to configure or set up the testing environment before each test\n+  // setupFiles: [],\n+\n+  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n+  // setupFilesAfterEnv: [],\n+\n+  // The number of seconds after which a test is considered as slow and reported as such in the results.\n+  // slowTestThreshold: 5,\n+\n+  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n+  // snapshotSerializers: [],\n+\n+  // The test environment that will be used for testing\n+  // testEnvironment: \"jest-environment-node\",\n+\n+  // Options that will be passed to the testEnvironment\n+  // testEnvironmentOptions: {},\n+\n+  // Adds a location field to test results\n+  // testLocationInResults: false,\n+\n+  // The glob patterns Jest uses to detect test files\n+  // testMatch: [\n+  //   \"**/__tests__/**/*.[jt]s?(x)\",\n+  //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n+  // ],\n+\n+  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n+  // testPathIgnorePatterns: [\n+  //   \"\\\\\\\\node_modules\\\\\\\\\"\n+  // ],\n+\n+  // The regexp pattern or array of patterns that Jest uses to detect test files\n+  // testRegex: [],\n+\n+  // This option allows the use of a custom results processor\n+  // testResultsProcessor: undefined,\n+\n+  // This option allows use of a custom test runner\n+  // testRunner: \"jest-circus/runner\",\n+\n+  // A map from regular expressions to paths to transformers\n+  // transform: undefined,\n+\n+  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n+  // transformIgnorePatterns: [\n+  //   \"\\\\\\\\node_modules\\\\\\\\\",\n+  //   \"\\\\.pnp\\\\.[^\\\\\\\\]+$\"\n+  // ],\n+\n+  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n+  // unmockedModulePathPatterns: undefined,\n+\n+  // Indicates whether each individual test should be reported during the run\n+  // verbose: undefined,\n+\n+  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n+  // watchPathIgnorePatterns: [],\n+\n+  // Whether to use watchman for file crawling\n+  // watchman: true,\n+};\n+r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685802588380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+/*\n+ * For a detailed explanation regarding each configuration property and type check, visit:\n+ * https://jestjs.io/docs/configuration\n+ */\n+\n+export default {\n+  // All imported modules in your tests should be mocked automatically\n+  // automock: false,\n+\n+  // Stop running tests after `n` failures\n+  // bail: 0,\n+\n+  // The directory where Jest should store its cached dependency information\n+  // cacheDirectory: \"C:\\\\Users\\\\ZZ00VO865\\\\AppData\\\\Local\\\\Temp\\\\jest\",\n+\n+  // Automatically clear mock calls, instances, contexts and results before every test\n+  // clearMocks: false,\n+\n+  // Indicates whether the coverage information should be collected while executing the test\n+  // collectCoverage: false,\n+\n+  // An array of glob patterns indicating a set of files for which coverage information should be collected\n+  // collectCoverageFrom: undefined,\n+\n+  // The directory where Jest should output its coverage files\n+  // coverageDirectory: undefined,\n+\n+  // An array of regexp pattern strings used to skip coverage collection\n+  // coveragePathIgnorePatterns: [\n+  //   \"\\\\\\\\node_modules\\\\\\\\\"\n+  // ],\n+\n+  // Indicates which provider should be used to instrument code for coverage\n+  // coverageProvider: \"babel\",\n+\n+  // A list of reporter names that Jest uses when writing coverage reports\n+  // coverageReporters: [\n+  //   \"json\",\n+  //   \"text\",\n+  //   \"lcov\",\n+  //   \"clover\"\n+  // ],\n+\n+  // An object that configures minimum threshold enforcement for coverage results\n+  // coverageThreshold: undefined,\n+\n+  // A path to a custom dependency extractor\n+  // dependencyExtractor: undefined,\n+\n+  // Make calling deprecated APIs throw helpful error messages\n+  // errorOnDeprecated: false,\n+\n+  // The default configuration for fake timers\n+  // fakeTimers: {\n+  //   \"enableGlobally\": false\n+  // },\n+\n+  // Force coverage collection from ignored files using an array of glob patterns\n+  // forceCoverageMatch: [],\n+\n+  // A path to a module which exports an async function that is triggered once before all test suites\n+  // globalSetup: undefined,\n+\n+  // A path to a module which exports an async function that is triggered once after all test suites\n+  // globalTeardown: undefined,\n+\n+  // A set of global variables that need to be available in all test environments\n+  // globals: {},\n+\n+  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n+  // maxWorkers: \"50%\",\n+\n+  // An array of directory names to be searched recursively up from the requiring module's location\n+  // moduleDirectories: [\n+  //   \"node_modules\"\n+  // ],\n+\n+  // An array of file extensions your modules use\n+  // moduleFileExtensions: [\n+  //   \"js\",\n+  //   \"mjs\",\n+  //   \"cjs\",\n+  //   \"jsx\",\n+  //   \"ts\",\n+  //   \"tsx\",\n+  //   \"json\",\n+  //   \"node\"\n+  // ],\n+\n+  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n+  // moduleNameMapper: {},\n+\n+  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n+  // modulePathIgnorePatterns: [],\n+\n+  // Activates notifications for test results\n+  // notify: false,\n+\n+  // An enum that specifies notification mode. Requires { notify: true }\n+  // notifyMode: \"failure-change\",\n+\n+  // A preset that is used as a base for Jest's configuration\n+  // preset: undefined,\n+\n+  // Run tests from one or more projects\n+  // projects: undefined,\n+\n+  // Use this configuration option to add custom reporters to Jest\n+  // reporters: undefined,\n+\n+  // Automatically reset mock state before every test\n+  // resetMocks: false,\n+\n+  // Reset the module registry before running each individual test\n+  // resetModules: false,\n+\n+  // A path to a custom resolver\n+  // resolver: undefined,\n+\n+  // Automatically restore mock state and implementation before every test\n+  // restoreMocks: false,\n+\n+  // The root directory that Jest should scan for tests and modules within\n+  // rootDir: undefined,\n+\n+  // A list of paths to directories that Jest should use to search for files in\n+  // roots: [\n+  //   \"<rootDir>\"\n+  // ],\n+\n+  // Allows you to use a custom runner instead of Jest's default test runner\n+  // runner: \"jest-runner\",\n+\n+  // The paths to modules that run some code to configure or set up the testing environment before each test\n+  // setupFiles: [],\n+\n+  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n+  // setupFilesAfterEnv: [],\n+\n+  // The number of seconds after which a test is considered as slow and reported as such in the results.\n+  // slowTestThreshold: 5,\n+\n+  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n+  // snapshotSerializers: [],\n+\n+  // The test environment that will be used for testing\n+  // testEnvironment: \"jest-environment-node\",\n+\n+  // Options that will be passed to the testEnvironment\n+  // testEnvironmentOptions: {},\n+\n+  // Adds a location field to test results\n+  // testLocationInResults: false,\n+\n+  // The glob patterns Jest uses to detect test files\n+  // testMatch: [\n+  //   \"**/__tests__/**/*.[jt]s?(x)\",\n+  //   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n+  // ],\n+\n+  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n+  // testPathIgnorePatterns: [\n+  //   \"\\\\\\\\node_modules\\\\\\\\\"\n+  // ],\n+\n+  // The regexp pattern or array of patterns that Jest uses to detect test files\n+  // testRegex: [],\n+\n+  // This option allows the use of a custom results processor\n+  // testResultsProcessor: undefined,\n+\n+  // This option allows use of a custom test runner\n+  // testRunner: \"jest-circus/runner\",\n+\n+  // A map from regular expressions to paths to transformers\n+  // transform: undefined,\n+\n+  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n+  // transformIgnorePatterns: [\n+  //   \"\\\\\\\\node_modules\\\\\\\\\",\n+  //   \"\\\\.pnp\\\\.[^\\\\\\\\]+$\"\n+  // ],\n+\n+  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n+  // unmockedModulePathPatterns: undefined,\n+\n+  // Indicates whether each individual test should be reported during the run\n+  // verbose: undefined,\n+\n+  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n+  // watchPathIgnorePatterns: [],\n+\n+  // Whether to use watchman for file crawling\n+  // watchman: true,\n+};\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685802596688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,7 +192,7 @@\n \n   // Whether to use watchman for file crawling\n   // watchman: true,\n };\n-\n+r\n }r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1685802691720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n   // notifyMode: \"failure-change\",\n \n   // A preset that is used as a base for Jest's configuration\n   // preset: undefined,\n-  preset:\"jest-puppete\"\n+  preset:\"jest-puppeter\"\n \n   // Run tests from one or more projects\n   // projects: undefined,\n \n"
                }
            ],
            "date": 1685786057159,
            "name": "Commit-0",
            "content": "module.exports"
        }
    ]
}